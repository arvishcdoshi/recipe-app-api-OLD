to run Dockerfile(required only once)
docker-build .

to run compose file
docker-compose build

to run specific thing with compose


EXAMPLE :- docker-compose run app sh -c "python manage.py test && flake8"

To start the docker compose server
>> docker-compose up

DRF Viewsets are used to create the structure of our API and provide all of the neccessary endpoints for managing objects.
DRF Serializers are used to provide validation on all requests to our API and to help convert JSON objects to Django database models

Alpine image is lightweight version of Docker.. which runs Python3.7

Docker compose is a tool that allows us to run our docker image easily from our project location

command: >
      sh -c "python manage.py runserver 0.0.0.0:8000" 

--> Above line in the docker-compose.yml file will run the Django development server available on all the IP addresses that run on Docker

Manager class is a class that provides helper functions for creating a user or creating a super user

BASEUSER-MANAGER
--> In the UserManager, we put password = None in case we want to create a user that is not active that doesn't have a password

--> **extra_fields --> This says that take any of the extra functions that are passed in when you call create_user and pass them into 
extra_fields so that we can then just add any additional fields that we create without user model

It's not required but it just makes our function a little bit more flexible because every time we add new fields to our user, we don't 
have to add them in arguments, we can just add them Ad-Hoc as we add them to our model

SETUP function --> It is a function that is ran before every test that we run

Explanation of setUp function in test_admins:
--> Our setUp function is going to consist of creating our test client and we're going to add a new user that we can use to test.
 We will make sure the user is logged into our client and finally we're going to create a regular user that is not authenticated 
 or that we can use to list in our admin page


 *** from django.utils.translation import gettext as _

Above import statement is the recommended convention for converting strings in Python to human-readable text and the reason we do 
this is just so it gets passed through the translation engine. If we want the code to support multiple languages, then this would make 
it a lot easier for us to do

We basically setup the translation files and then it will  convert the text appropriately 


We want our app service to depend on the database service that we create.It means two things. 
1) The database service will  start before the app. 
2) It means the database service will be available via network when you use the hostname 'db'. 

So when we're inside our app service, we can connect to the hostname 'db' and then it will connect 
to whatever container is running on our 'db' service.

from unittest.mock import patch
# allows us to mock the behaviour of the Django get database function. We can basically simulate the database
being available or not being available for when we test our command

from django.core.management import call_command
# This function would allow us to call the command in our source code

Whenever we're overriding the validate function, we must return values at the end,
once the validation is successful
****
attrs['user'] = user
return attrs
****

